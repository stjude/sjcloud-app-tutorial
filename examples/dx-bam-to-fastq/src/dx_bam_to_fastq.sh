#!/bin/bash
# dx_bam_to_fastq 0.0.1
# Generated by dx-app-wizard.
#
# Basic execution pattern: Your app will run on a single machine from
# beginning to end.
#
# Your job's input variables (if any) will be loaded as environment
# variables before this script runs.  Any array inputs will be loaded
# as bash arrays.
#
# Any code outside of main() (or any entry point you may add) is
# ALWAYS executed, followed by running the entry point itself.
#
# See https://wiki.dnanexus.com/Developer-Portal for tutorials on how
# to modify this file.

set -e -x

main() {

    echo "Value of bam_file: '$bam_file'"

    # The following line(s) use the dx command-line tool to download your file
    # inputs to the local file system using variable names for the filenames. To
    # recover the original filenames, you can use the output of "dx describe
    # "$variable" --name".

    dx download "$bam_file"

    # Install conda
    pypath=$PYTHONPATH
    orig_path=$PATH
    export PYTHONPATH=
    wget "https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh" -O miniconda.sh 
    chmod a+x miniconda.sh 
       ./miniconda.sh -b -p /opt/conda/ 
       rm miniconda.sh

    PATH=/opt/conda/bin:$PATH

    conda update -n base -c defaults conda -y && \
       conda install \
       -c conda-forge \
       -c bioconda \
       picard==2.22.2 \
       samtools==1.10 \
       -y && \
       conda clean --all -y

    # Fill in your application code here.
    #
    # To report any recognized errors in the correct format in
    # $HOME/job_error.json and exit this script, you can use the
    # dx-jobutil-report-error utility as follows:
    #
    #   dx-jobutil-report-error "My error message"
    #
    # Note however that this entire bash script is executed with -e
    # when running in the cloud, so any line which returns a nonzero
    # exit code will prematurely exit the script; if no error was
    # reported in the job_error.json file, then the failure reason
    # will be AppInternalError with a generic error message.

    samtools quickcheck $bam_file_name
    PREFIX=$(basename $bam_file_name ".bam")
    samtools split --threads 4 -u $PREFIX.unaccounted_reads.bam -f '%*_%!.%.' $bam_file_name
    echo $(ls)
    for bam in ${PREFIX}_*.bam
    do
      echo ${bam} 
      BASE=$(basename $bam ".bam")
      picard -Xmx10g SamToFastq INPUT=${bam} FASTQ=${BASE}_R1.fastq SECOND_END_FASTQ=${BASE}_R2.fastq RE_REVERSE=true VALIDATION_STRINGENCY=SILENT
    done

    # The following line(s) use the utility dx-jobutil-add-output to format and
    # add output variables to your job's output as appropriate for the output
    # class.  Run "dx-jobutil-add-output -h" for more information on what it
    # does.
    read_ones=(*_R1.fastq)
    read_twos=(*_R2.fastq)

    export PYTHONPATH=$pypath
    export PATH=$orig_path
    for i in "${!read_ones[@]}"; do
        id=$(dx upload ${read_ones[$i]} --brief)
        dx-jobutil-add-output read_ones "$id" --class=array:file
    done
    for i in "${!read_twos[@]}"; do
        id=$(dx upload ${read_twos[$i]} --brief)
        dx-jobutil-add-output read_twos "$id" --class=array:file
    done
}
